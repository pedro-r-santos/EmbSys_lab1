Checks: >
  -*,
  bugprone-assert-side-effect,
  bugprone-assignment-in-if-condition,
  bugprone-bad-signal-to-kill-thread,
  bugprone-bool-pointer-implicit-conversion,
  bugprone-branch-clone,
  bugprone-copy-constructor-init,
  bugprone-dangling-handle,
  bugprone-dynamic-static-initializers,
  bugprone-easily-swappable-parameters,
  bugprone-exception-escape,
  bugprone-fold-init-type,
  bugprone-forward-declaration-namespace,
  bugprone-forwarding-reference-overload,
  bugprone-implicit-widening-of-multiplication-result,
  bugprone-inaccurate-erase, 
  bugprone-incorrect-roundings,
  bugprone-infinite-loop,
  bugprone-integer-division,
  bugprone-lambda-function-name,
  bugprone-macro-parentheses,
  bugprone-macro-repeated-side-effects,
  bugprone-misplaced-operator-in-strlen-in-alloc,
  bugprone-misplaced-pointer-arithmetic-in-alloc,
  bugprone-misplaced-widening-cast,
  bugprone-move-forwarding-reference,
  bugprone-multiple-statement-macro,
  bugprone-no-escape,
  bugprone-not-null-terminated-result,
  bugprone-parent-virtual-call,
  bugprone-posix-return,
  bugprone-redundant-branch-condition,
  bugprone-reserved-identifier,
  bugprone-shared-ptr-array-mismatch,
  bugprone-signal-handler,
  bugprone-signed-char-misuse,
  bugprone-sizeof-container,
  bugprone-sizeof-expression,
  bugprone-spuriously-wake-up-functions,
  bugprone-string-constructor,
  bugprone-string-integer-assignment,
  bugprone-string-literal-with-embedded-nul,
  bugprone-stringview-nullptr,
  bugprone-suspicious-enum-usage,
  bugprone-suspicious-memory-comparison,
  bugprone-suspicious-memset-usage,
  bugprone-suspicious-missing-comma,
  bugprone-suspicious-realloc-usage,
  bugprone-suspicious-semicolon,
  bugprone-suspicious-string-compare,
  bugprone-swapped-arguments,
  bugprone-terminating-continue,
  bugprone-throw-keyword-missing,
  bugprone-too-small-loop-variable,
  bugprone-unchecked-optional-access,
  bugprone-undefined-memory-manipulation,
  bugprone-undelegated-constructor,
  bugprone-unhandled-exception-at-new,
  bugprone-unhandled-self-assignment,
  bugprone-unused-raii,
  bugprone-unused-return-value,
  bugprone-use-after-move,
  bugprone-virtual-near-miss,
  cert-dcl21-cpp,
  cert-dcl58-cpp,
  cert-env33-c,
  cert-err33-c,
  cert-err34-c,
  cert-err52-cpp,
  cert-err58-cpp,
  cert-err60-cpp,
  cert-flp30-c,
  cert-mem57-cpp,
  cert-oop58-cpp,
  clang-analyzer-core.DynamicTypePropagation,
  clang-analyzer-core.uninitialized.CapturedBlockVariable,
  clang-analyzer-cplusplus.InnerPointer,
  clang-analyzer-nullability.NullableReturnedFromNonnull,
  clang-analyzer-optin.performance.Padding,
  clang-analyzer-optin.portability.UnixAPI,
  clang-analyzer-valist.CopyToSelf,
  clang-analyzer-valist.Uninitialized,
  clang-analyzer-valist.Unterminated,
  concurrency-mt-unsafe,
  concurrency-thread-canceltype-asynchronous,
  cppcoreguidelines-avoid-do-while,
  cppcoreguidelines-avoid-goto,
  cppcoreguidelines-avoid-non-const-global-variables,
  cppcoreguidelines-init-variables,
  cppcoreguidelines-interfaces-global-init,
  cppcoreguidelines-macro-usage,
  cppcoreguidelines-narrowing-conversions,
  hicpp-multiway-paths-covered,
  llvm-include-order,
  misc-confusable-identifiers,
  misc-definitions-in-headers,
  misc-misleading-bidirectional,
  misc-misleading-identifier,
  misc-misplaced-const,
  misc-non-copyable-objects,
  misc-redundant-expression,
  misc-static-assert,
  misc-unused-parameters,
  modernize-redundant-void-arg,
  performance-implicit-conversion-in-loop,
  performance-no-int-to-ptr,
  portability-restrict-system-includes,
  readability-avoid-const-params-in-decls,
  readability-braces-around-statements,
  readability-const-return-type,
  readability-delete-null-pointer,
  readability-duplicate-include,
  readability-else-after-return,
  readability-function-cognitive-complexity,
  readability-function-size,
  readability-identifier-length,
  readability-identifier-naming,
  readability-implicit-bool-conversion,
  readability-inconsistent-declaration-parameter-name,
  readability-isolate-declaration,
  readability-magic-numbers,
  readability-misleading-indentation,
  readability-misplaced-array-index,
  readability-named-parameter,
  readability-non-const-parameter,
  readability-redundant-access-specifiers,
  readability-redundant-control-flow,
  readability-redundant-declaration,
  readability-redundant-function-ptr-dereference,
  readability-redundant-preprocessor,
  readability-simplify-boolean-expr,
  readability-uppercase-literal-suffix,
  clang-diagnostic-*,

HeaderFilterRegex: ""
AnalyzeTemporaryDtors: false
CheckOptions:
  - { key: bugprone-easily-swappable-parameters.QualifiersMix, value: true }
  - {
      key: bugprone-easily-swappable-parameters.ModelImplicitConversions,
      value: true,
    }
  - {
      key: bugprone-implicit-widening-of-multiplication-result.UseCXXStaticCastsInCppSources,
      value: true,
    }
  - {
      key: bugprone-implicit-widening-of-multiplication-result.UseCXXStaticCastsInCppSources,
      value: true,
    }
  - { key: bugprone-misplaced-widening-cast.CheckImplicitCasts, value: true }
  - { key: bugprone-misplaced-widening-cast.CheckImplicitCasts, value: true }
  - { key: bugprone-reserved-identifier.Invert, value: false }
  - { key: bugprone-signal-handler.AsyncSafeFunctionSet, value: "POSIX" }
  - {
      key: bugprone-signed-char-misuse.DiagnoseSignedUnsignedCharComparisons,
      value: true,
    }
  - { key: bugprone-sizeof-expression.WarnOnSizeOfConstant, value: true }
  - {
      key: bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression,
      value: true,
    }
  - { key: bugprone-sizeof-expression.WarnOnSizeOfThis, value: true }
  - {
      key: bugprone-sizeof-expression.WarnOnSizeOfCompareToConstant,
      value: true,
    }
  - {
      key: bugprone-sizeof-expression.WarnOnSizeOfPointerToAggregate,
      value: true,
    }
  - { key: bugprone-string-constructor.WarnOnLargeLength, value: true }
  - {
      key: bugprone-suspicious-string-compare.WarnOnImplicitComparison,
      value: true,
    }
  - {
      key: bugprone-suspicious-string-compare.WarnOnLogicalNotComparison,
      value: false,
    }
  - { key: cppcoreguidelines-init-variables.IncludeStyle, value: "google" }
  - {
      key: cppcoreguidelines-narrowing-conversions.WarnOnIntegerNarrowingConversion,
      value: true,
    }
  - {
      key: cppcoreguidelines-narrowing-conversions.WarnOnIntegerToFloatingPointNarrowingConversion,
      value: true,
    }
  - {
      key: cppcoreguidelines-narrowing-conversions.WarnOnFloatingPointNarrowingConversion,
      value: true,
    }
  - {
      key: cppcoreguidelines-narrowing-conversions.WarnWithinTemplateInstantiation,
      value: true,
    }
  - {
      key: cppcoreguidelines-narrowing-conversions.WarnOnEquivalentBitWidth,
      value: true,
    }
  - { key: cppcoreguidelines-narrowing-conversions.PedanticMode, value: true }
  - { key: hicpp-multiway-paths-covered.WarnOnMissingElse, value: true }
  - { key: readability-else-after-return.WarnOnUnfixable, value: true }
  - { key: readability-else-after-return.WarnOnConditionVariables, value: true }
  - {
      key: readability-function-cognitive-complexity.DescribeBasicIncrements,
      value: true,
    }
  - {
      key: readability-inconsistent-declaration-parameter-name.IgnoreMacros,
      value: false,
    }
  - {
      key: readability-inconsistent-declaration-parameter-name.Strict,
      value: true,
    }
  - {
      key: readability-magic-numbers.IgnorePowersOf2IntegerValues,
      value: false,
    }
  - {
      key: readability-magic-numbers.IgnoreAllFloatingPointValues,
      value: false,
    }
  - { key: readability-magic-numbers.IgnoreBitFieldsWidths, value: true }
